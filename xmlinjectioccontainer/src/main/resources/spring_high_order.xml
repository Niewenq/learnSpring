<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- ! 1、实例化 bean -->
    <!-- ? 1.1 通过构造器实例化 bean -->
    <bean class="com.ieening.NormalBean" id="testInstanceBeanWithConstructorId"
        name="testInstanceBeanWithConstructorName" />
    <!-- ? 1.2 通过静态⼯⼚⽅法实例化 bean -->
    <import resource="spring.xml" />
    <bean class="com.ieening.NormalBean" id="testInstanceBeanWithStaticFactoryMethodId"
        factory-method="createInstance" depends-on="testAttributeInjectCustomBeanId">
        <constructor-arg name="customBean" ref="testAttributeInjectCustomBeanId" />
    </bean>
    <!-- ? 1.3 通过实例⼯⼚⽅法实例化 bean -->
    <bean class="com.ieening.BeanFactory" id="beanFactoryId" />
    <bean factory-bean="beanFactoryId" factory-method="createNormalBean"
        id="testNormalBeanWithInstanceFactoryMethod">
    </bean>

    <!-- ! 2、生命周期回调 -->
    <!-- ? 2.1 实现接口 -->
    <bean class="com.ieening.LifecycleBeanWithInterface" id="testLifecycleBeanWithInterfaceId"
        lazy-init="true"></bean>
    <!-- ? 2.2 init-method 和 destroy-method -->
    <bean class="com.ieening.LifecycleBeanWithInitDestroyMethod"
        id="testLifecycleBeanWithInitDestroyMethodId" init-method="init" destroy-method="destroy"
        lazy-init="true" />
    <!-- ! 3、bean 作用域 -->
    <bean class="com.ieening.SingletonScopeBean" id="testSingletonScopeBeanId" scope="singleton"></bean>
    <bean class="com.ieening.PrototypeScopeBean" id="testPrototypeScopeBeanId" scope="prototype"></bean>


</beans>